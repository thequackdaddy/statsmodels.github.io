{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Prediction (out of sample)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import statsmodels.api as sm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Artificial data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "nsample = 50\n",
    "sig = 0.25\n",
    "x1 = np.linspace(0, 20, nsample)\n",
    "X = np.column_stack((x1, np.sin(x1), (x1-5)**2))\n",
    "X = sm.add_constant(X)\n",
    "beta = [5., 0.5, 0.5, -0.02]\n",
    "y_true = np.dot(X, beta)\n",
    "y = y_true + sig * np.random.normal(size=nsample)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Estimation "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.989\n",
      "Model:                            OLS   Adj. R-squared:                  0.988\n",
      "Method:                 Least Squares   F-statistic:                     1369.\n",
      "Date:                Mon, 02 Dec 2019   Prob (F-statistic):           5.76e-45\n",
      "Time:                        00:22:10   Log-Likelihood:                 10.748\n",
      "No. Observations:                  50   AIC:                            -13.50\n",
      "Df Residuals:                      46   BIC:                            -5.848\n",
      "Df Model:                           3                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const          4.9557      0.069     71.455      0.000       4.816       5.095\n",
      "x1             0.4880      0.011     45.622      0.000       0.466       0.510\n",
      "x2             0.5318      0.042     12.647      0.000       0.447       0.616\n",
      "x3            -0.0186      0.001    -19.768      0.000      -0.020      -0.017\n",
      "==============================================================================\n",
      "Omnibus:                        0.782   Durbin-Watson:                   1.705\n",
      "Prob(Omnibus):                  0.676   Jarque-Bera (JB):                0.841\n",
      "Skew:                          -0.160   Prob(JB):                        0.657\n",
      "Kurtosis:                       2.451   Cond. No.                         221.\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "olsmod = sm.OLS(y, X)\n",
    "olsres = olsmod.fit()\n",
    "print(olsres.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## In-sample prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 4.4915478   4.97448521  5.41655689  5.78878066  6.07263388  6.26309661\n",
      "  6.36947644  6.41387921  6.42757713  6.44587085  6.50228962  6.62308255\n",
      "  6.82290599  7.10241548  7.44815807  7.8347826   8.22920483  8.59604308\n",
      "  8.90343135  9.12825478  9.25994741  9.30222809  9.27248951  9.19894061\n",
      "  9.11597197  9.05850547  9.05625681  9.1288532   9.28260877  9.50948711\n",
      "  9.78842163 10.0887768  10.37538139 10.61430709 10.77844279 10.85194885\n",
      " 10.83285955 10.733406   10.57800666 10.39925541 10.23256647 10.11035599\n",
      " 10.05671612 10.08345674 10.18816518 10.35460254 10.55537177 10.75641886\n",
      " 10.92262787 11.02359037]\n"
     ]
    }
   ],
   "source": [
    "ypred = olsres.predict(X)\n",
    "print(ypred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create a new sample of explanatory variables Xnew, predict and plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[11.02907256 10.89548393 10.64367933 10.32118434  9.99055933  9.71408252\n",
      "  9.5385021   9.48359061  9.53730397  9.65873027]\n"
     ]
    }
   ],
   "source": [
    "x1n = np.linspace(20.5,25, 10)\n",
    "Xnew = np.column_stack((x1n, np.sin(x1n), (x1n-5)**2))\n",
    "Xnew = sm.add_constant(Xnew)\n",
    "ynewpred =  olsres.predict(Xnew) # predict out of sample\n",
    "print(ynewpred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot comparison"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.plot(x1, y, 'o', label=\"Data\")\n",
    "ax.plot(x1, y_true, 'b-', label=\"True\")\n",
    "ax.plot(np.hstack((x1, x1n)), np.hstack((ypred, ynewpred)), 'r', label=\"OLS prediction\")\n",
    "ax.legend(loc=\"best\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Predicting with Formulas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using formulas can make both estimation and prediction a lot easier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "from statsmodels.formula.api import ols\n",
    "\n",
    "data = {\"x1\" : x1, \"y\" : y}\n",
    "\n",
    "res = ols(\"y ~ x1 + np.sin(x1) + I((x1-5)**2)\", data=data).fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We use the `I` to indicate use of the Identity transform. Ie., we do not want any expansion magic from using `**2`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Intercept           4.955671\n",
       "x1                  0.487977\n",
       "np.sin(x1)          0.531792\n",
       "I((x1 - 5) ** 2)   -0.018565\n",
       "dtype: float64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.params"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we only have to pass the single variable and we get the transformed right-hand side variables automatically"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    11.029073\n",
       "1    10.895484\n",
       "2    10.643679\n",
       "3    10.321184\n",
       "4     9.990559\n",
       "5     9.714083\n",
       "6     9.538502\n",
       "7     9.483591\n",
       "8     9.537304\n",
       "9     9.658730\n",
       "dtype: float64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.predict(exog=dict(x1=x1n))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
