{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Prediction (out of sample)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import statsmodels.api as sm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Artificial data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "nsample = 50\n",
    "sig = 0.25\n",
    "x1 = np.linspace(0, 20, nsample)\n",
    "X = np.column_stack((x1, np.sin(x1), (x1-5)**2))\n",
    "X = sm.add_constant(X)\n",
    "beta = [5., 0.5, 0.5, -0.02]\n",
    "y_true = np.dot(X, beta)\n",
    "y = y_true + sig * np.random.normal(size=nsample)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Estimation "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.989\n",
      "Model:                            OLS   Adj. R-squared:                  0.988\n",
      "Method:                 Least Squares   F-statistic:                     1384.\n",
      "Date:                Thu, 05 Dec 2019   Prob (F-statistic):           4.45e-45\n",
      "Time:                        10:25:30   Log-Likelihood:                 10.419\n",
      "No. Observations:                  50   AIC:                            -12.84\n",
      "Df Residuals:                      46   BIC:                            -5.189\n",
      "Df Model:                           3                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const          4.9434      0.070     70.811      0.000       4.803       5.084\n",
      "x1             0.5101      0.011     47.375      0.000       0.488       0.532\n",
      "x2             0.4932      0.042     11.654      0.000       0.408       0.578\n",
      "x3            -0.0207      0.001    -21.915      0.000      -0.023      -0.019\n",
      "==============================================================================\n",
      "Omnibus:                        0.567   Durbin-Watson:                   2.324\n",
      "Prob(Omnibus):                  0.753   Jarque-Bera (JB):                0.392\n",
      "Skew:                           0.214   Prob(JB):                        0.822\n",
      "Kurtosis:                       2.936   Cond. No.                         221.\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "olsmod = sm.OLS(y, X)\n",
    "olsres = olsmod.fit()\n",
    "print(olsres.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## In-sample prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 4.42548959  4.91056975  5.35658114  5.73664249  6.03357384  6.24271916\n",
      "  6.37271132  6.44405373  6.4857517   6.53054693  6.60953818  6.74707178\n",
      "  6.95674163  7.23915576  7.5818364   7.96127011  8.34677089  8.70552187\n",
      "  9.00796698  9.23266697  9.36982177  9.42288068  9.40797558  9.35127058\n",
      "  9.2846633   9.24054415  9.24647474  9.32065954  9.46895496  9.68390714\n",
      "  9.94597662 10.22674858 10.49360138 10.71506612 10.86599697 10.9317025\n",
      " 10.91035948 10.8133124  10.66320963 10.49028234 10.32737761 10.20456174\n",
      " 10.14418045 10.15718755 10.24134524 10.38159179 10.55251613 10.72253281\n",
      " 10.85907144 10.93392786]\n"
     ]
    }
   ],
   "source": [
    "ypred = olsres.predict(X)\n",
    "print(ypred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create a new sample of explanatory variables Xnew, predict and plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[10.91440995 10.76415359 10.50250188 10.1735353   9.83527925  9.54549745\n",
      "  9.3475493   9.25977408  9.27100076  9.34328313]\n"
     ]
    }
   ],
   "source": [
    "x1n = np.linspace(20.5,25, 10)\n",
    "Xnew = np.column_stack((x1n, np.sin(x1n), (x1n-5)**2))\n",
    "Xnew = sm.add_constant(Xnew)\n",
    "ynewpred =  olsres.predict(Xnew) # predict out of sample\n",
    "print(ynewpred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot comparison"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXAAAAD4CAYAAAD1jb0+AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAgAElEQVR4nO3dd1iV5RvA8e/DkOHCAQ7URFPcipI7c2RWWu7MylGZpZmVqdFUf+UoTc3UysyZ5hYrTXOh5QwDdzhRwYUoCgKynt8fR0jgoIxzOJzD/bkuLuA97+G9Xw/ePOd+ltJaI4QQwvrYWToAIYQQuSMJXAghrJQkcCGEsFKSwIUQwkpJAhdCCCvlkJ8XK1u2rK5atWp+XlIIIazegQMHrmmt3TMez9cEXrVqVQIDA/PzkkIIYfWUUueMHZcSihBCWClJ4EIIYaUkgQshhJWSBC6EEFbqgQlcKTVPKXVVKXXknmO9lVJHlVIpSilf84YohBDCmOy0wBcAT2Y4dgToAew0dUBC2Cr/oHBaTdqGl996Wk3ahn9QuKVDElbugcMItdY7lVJVMxw7DqCUMk9UQtgY/6BwPlhzmLjEZADCo+L4YM1hALr5eFoyNGHFpAYuRD6YvCkkLXmniktMZvKmEAtFZDnx8ZCSYukobIPZE7hSarBSKlApFRgREWHuywmR77IsjcTEQGgoJCZyMSrO6HOzOm6LYmNh+jTN01WO8MfXx+DGDZD9CPLE7DMxtdZzgDkAvr6+8moJm5KpNHIjliUzV1HuzF80+HMDRZNjSVL2/OniwbkS5Qkr7c7+qnVZW7ctKXb2VHRzsfAdmI9/UDiTN4UQdjUBh2NVafNXEENvT+UdAmEEhg8nJyhfHipUMHwMHgxPZuxyE1nJ16n0Qtia1NKIa0Ic3Y9s5/nAzdS/cZJYXFjG8+yza0rllDC8Ys/iFXuWtpeD6XPsD/rv2cCkZwfTp0+fbF0nNRlejIqjopsLozp5F+jauX9QOH6rDnN7R1l67t/BO4lvUJVzXC5Tla9avUWodqZGSgxPldHU0Lfh0iX4+29YuxZGjYLx48HR0dK3UeA9MIErpX4G2gJllVJhwBjgOvAN4A6sV0oFa607mTNQIQqii1FxlL91jQVLxlHr1lmCaMRQu29YV/cxdJMoHD1ukRJfjaSbnXCKKw43i9Jq526+uPERPy98j5Pnd9O1+XMcSimaZWK2xg7QSb+exGtBDIsu9sOda+z1aMj41v3Y+nBTUtR/ldtvHe2Z2KO+4T7i4mDECJg8GXbuhGXLQBa/uy+Vn3ti+vr6alnMStiSviMWMPnbDygeH0vfYgvZ16IaRetews4pKdO5Cjg7qTPx8fD1hNukTJjAiOQpJNg78MVjA/jpkc643JvQ7mo1aRvhRmrlnm4u7PJrb87by5XLl2GC9xSm3vLjVNGq+PUYSnBF7yzPz3QfK1fCoEFgZwc//gg9euRD1AWbUuqA1jrTnBsZhSJEDtzbYfna0Fl8N3sEDvGaJyqs5chrzhRvfAF7I8kbSKt3OzvD+/8ryuqRT9Ok2nb+TH6Mz7d9i9/GhcQnJGYamWJNHaBHgxPZXGMIM26NYmv5FvR6beJ9kzcYuY/evSEoCB5+GHr2hLfeMgxdEZlIDVyIbLq3lPHomQNMXz2JyykVGOKzGrseN7CPSaaimwvtarmz+kB4umGDLo72jOqUPpFFEoXuDa+c/pSP13gx7OBsyt6O4oNub6Y7r6Kbi9EWuKU6QLOqx+9YE4l6rhf9kgPY32UYIxo8ye17Rk4qwNj7faP3Ua0a7NoFH3wAU6fCuXPg729olYs0ksCFyKbUDssn/t3NrHVfcoR69KrzA+V6XWfPh+lLGb4PlX5gp2NqYnauHsmEfn24vNSDz0+NpdyK2zD2cShaFIBRnbzT1cDB+B+E/JBVPf70+mt0/aQnVdQFrk1bRNN3+jE+Q6LP7h+2NEWKwFdfQZUq8M478MUXhoQu0kgNXIhs8vJbj1dkGL/MG8HhlAY85zsbu/YXsVOG2nZOZUyGiTdc6bL4OLPj3iLa2xe3v9ZD2bJp5xaEUSjG6vElTySxau1IyttdRa//nRJPtszy+bm6D63hxRdh+XL44w/o0MEUt2JVsqqBSwIXIpvaffY730x5m/K3rvNow3XEPRkF5K0zMWNCG9SkNgcH72di6PPcqVQdt6CAtCReEHj5rU9XBikRmsTyFe9TSYeTuH4zpZ9ubp4Lx8RAs2YQEQH//AOVKpnnOgVUVglcSihCZNPM3T9T99ZJni29nNiON1HkvZTRzcczUwv0ZnBXPmyzngmHOnOjWSdKHdgKbm55jN407q3HF7uYxJIVH1FFX+DtFyYz11zJG6BYMVi9Gh55xNDJuWOHocRSyEmPgBDZkPTTMupuXMxXRUYTPqgSdvYaTzeXTEP+TGH7mXD29LCnT5mFFD1zmPM+TxhaoAXAqE7euDjaU+xqAouXfMrD+jSDnxlPl5FdzX/xWrVg/nzYuxfee8/817MCUkIR4kFOniS+bmMOJDbg6vIAuj9nvhmC99bFU+IdaL7gKktvvswF7xZ4Bf0BLqYZeZKXmvqSdSHU6vUC9ZKO8M6zk+k0tmf+1uPfe88wMmXJEnjhhfy7rgVJDVyI3IiP52bdFiSdOc/UfsGMX1TZrJfL2EmYHOtI+/nnmR8zmJstnqJUwNo8lw4ydp4CRicQGXMzLJpQ707Uif2bE5PWUvf9LnmKJVcSE6F9e0MtfN8+qFcv/2PIZzKRR4hciB7+ESXPBDPWayGfzDFv8obMk1rsXRPZOqAqQ11nUGrPBqKe7AMJCXm6Rm6Xto29FsuZus9QN3Y/hz9cli555+tmFY6OsGIFFC8OL70EScYnThUGksCFyII+8A+uP0xnrsMbDPu9C87O5r+msUktDsXuEPiWD5+W+ga37f7c7NgL7tzJ9TVyM7Mz4VY8/9bqRsNbO/n7rcU0Ht8z7bHUFn14VBya/8aGmzWJV6gAs2bBwYMwc6b5rlPASQIXwpjkZG70eZ0I3EkYNxHvfJozk9pJeC8XR3s+7lOVgYHD+LjULEru/JWoDj2MTi/PTks4qxmcWR1PjkvgSK1eNI7czM6B82gxo2+6xy22WUWPHvD00/DJJxAWZt5rFVCSwIUwIn7at5Q+Hcj0KtMYPDr/hvB18/FkYo/6eLq5oCDdSJdq1WDQP0P5sMz3uO3aQFS7boYV/O7Kbks4qz8S7Wq5Z0r+/rtOsaniszS+tJ4P6/yPqOEdM8VssbValDK0vpOSDDM1CyHpxBQio4sXifeqxc6E5hTftYkWLQvW3q/nzsFs33lMvDaIW490wC1gHbi65mjVwoyjUIxNc/eIvsU3876iWfwBRlX9hJV9mhXM1RInToQPP4T16w0tchsko1CEyKaoTn1w/mMdnz13hPHLH7Z0OEZduABTGs1j2vVBBJWpw4RXP+SAKpnl+Z5uLvcdMpgxCT8cFs6Pyz7HPfkab9SbyM7OD6f7Wfcm5ryMajGJhARo1MhQUjpyBFxdzX/NfCajUITIhpQNG3H7YwXTXD+m1hDX/BtZkUMHroWz/iUv+hRbzMORF/hx6hA6hew2eq6CB5ZV7i13tD58mDVLRuKYnMSzbeakS94Zz4X7l33yRZEi8O23cPasYSefQkRa4EKkio3l1kP1uHitCHM+DuB3gi3XqnyA1BZzSrwDJX4pzoKzw/HlAPMbdGVix4EkOBgmG2W1hGvGVnSrSdu4fD2Gl7Zv5tPA2RxS9Xml6zhueGdebaOgbiTBwIGwdCkEB0OdOpaOxqSkBS7EXVmN1Ij9eAIlrp1ldv3v2Ot6zDIjK7IptRVs55xEdO8bPNPxe6ar4bx8aB1rF3xAnStn8HRzMZq8730+AElJTIw6yuYZwxkXOJP1Dk/Ru99EYmo74mifvv5vqWVss2XyZMOaKUOGFJrd7iWBi0Ilq5Eam9f9hePXk1miXuL1n9ty6WbB3gXn3iF/SoFT48t8+XJPepdYToXIK2xYMJyNP77HiEO/4R5zw/jzk5OJm/cz18rXo80Xw7l5pxT9asxn2OvDKVfbicm9GzK5V0PLlUZyyt3dsGb4zp2waJGlo8kXUkIRhUpWIyYWLP+CJqFBfDX4BGO/r2D5kRUPkFXH4ZinGhA0z4mkxT/TJ2ERTfmbZOzY4fkIF0p7UCo6htJx0XjpWNxirlI09hqHqcfG5uN4dl43vGtbeZsuJQVat4ZTpyAkBEqVsnREJiElFCEw3oJ+7HQgbUP/ZGrRT3n3ywpA1mOlC0r5IKuOw+dbVuSLuWX47MYwzi7bz9B2x/lSvU/V8Kt0PrybmqEX4YoTf1+twc+xXRlXdzlxew4yak8P60/eYNhybfZsiIw0TPCxcQ9sgSul5gFdgKta63p3j5UGlgNVgVDgOa115vdpGUgLXFhaxpZ1kaREfv/ubRJvu9C9+3Lia4alDbUDCsQuOHl1/bphO8nbtw0z0O/9MNHihgXPW28ZEnlgIPj4WDqaPMv1OHClVBsgBlh0TwL/EriutZ6klPIDSmmt339QEJLAhaVlLD28vms1H/w1ny6lV3F4kDPqbp9dQRpxInIhKgpq1jTsbP/XX1a/GXKuSyha653A9QyHuwIL7369EOiW5wiFyAf3lh7KR19j+O7l+NOVA0+XT0veULBGnIhccHODL7+EPXtsukMzt3+WymmtLwHc/exhupCEMK9uPp7s8mvP5rA/sE9J5uMao3DyjMp0XkEZcSJyqX9/aNECRo+GGw+s8Fols7+vUEoNVkoFKqUCIyIizH05IbLnzz8p/stSpjuOxqWX8TJiVqvzCSthZ2dYcjYyEj791NLRmEVuE/gVpVQFgLufr2Z1otZ6jtbaV2vt6+7unsvLiYIiXxfuN5eEBGJeeoNzVMHhYz8+6u1VoEeciDzw8TFM7Jk92zBD08bkNoH/Agy4+/UAYJ1pwhEFmUUW7jeDxPFfUuz8MT6r8C1vve9q+bU8hHl99hmUKQNvvmkYJ25DsjMK5WegLVAWuAKMAfyBFUAV4DzQW2udsaMzExmFYt0K+uSWbDlxgsQ6DViT3JWyW5bToYOlAxL5Yv58eOUVw+eBAy0dTY5lNQol80o1GWit+2bxkPzqFzIWW7jfVLTm9kuvk5jszF+9vuYb+Q0uPAYMgB9+gJEjoVMnwyB4G2DdgyNFvsrpVlwFTcq8BRT9O4Bxrl/y6ezylg5H5Cc7O/jxR8NspldftZnFriSBi2zL7vTyAtnRefUqCW+P5E9aU//rQUh/eiFUu7ZhxcLffzesH24DJIGLbMtOZ19B7eiMGzoCu9vR/OA7h5dflV/7QuvNNw0llJEjDYtdWTlZjVCYVFYdnW4ujhR1crDMuiK//w5PP83ndp/S6+g4atXKn8uKAuriRahfH7y8DDM1HR0tHdEDyWqEIl9k1aEZFZdomVb5hQskPN+Pw9RD+30gyVtAxYowZw4cOADjxlk6mjyRBC5MKrsdmvmy1khCAglde3MnOgG/6qsY9Ymzea8nrEfPnoaRKRMnwm7je4laA0ngwqSMdXRmxdzDD5NHjKRI0D6GFJnHlF+9cZb8Le41YwZUqQL9+kF0tKWjyRVJ4MKkjHV0lnI1XmM06/DDZcuwn/UNU3mXLgt6Ubu2+S4lrFSJErB4MYSGGtYPt8KhhQ+cyCNETnXz8TQ6MiXj9l9mW2vk+HGSXh7EXloR+sYXjHjePJcRNqB1a/j4Y/jf/6BkSZg+nXTrChdwksCF2aUm84y724Bh1IpJR6bExJDwTE+i7hRlYsPlrJle8EcYCAsbO9ZQQpk2DRISDCsYWskGEJLARb54UKs8dWRK6rm5sT7gCJUG9KXe+RBeLPI7vcfb4+SU99iFjVMKvvoKnJxg0iRDEp8zB+yz15djSZLARe4lJsKOHdycvwa9fTu6aDHsKpTDqUo5nCqXQ1XyhKefNoy3zWDyppB0JRX4b2RKbhL4pg378e7fm8qRl3meZRx8thRhe4M5n+jJ9n8jrH5fS2FmSsGECVCkiKGckphoWPiqgCdxSeAiZ7Qm+dcNXPt2JcUDfsE1/gYOuLKddjiQRLlT4ZTjHzy4igOGBB3XsBkuA/rAc8+BpyF5mnRhrCNHaPR8F5xj4unE7xx5qgzFqocRlwhL9p4ntWvKFK18YcOUMowLd3Q07GifmGjo5HQouGmy4EYmCp74eMKeeo1KAT9RBDdWq2c5ULMLays/TOJDt9CJ9iRFu2B325Xm7p6UDI2gwp7V9Dm4jMYjRqDfe4+kFo/i+PqrVC3qztnbmddmzvHIlB07SH6mK0kxrrSxD+BytySKVQ9LezjjuIK8tPJFIfHxx4aW+PvvQ0yMYf2UvMwAO3oUli6Fd9+FsmVNFyeSwEU26UuXudisG5Uu7GNWhc8oP/V9uj7tyHezt6GiLlLk7nlO3ATgmtsl1i1pz6VLo1myZDSfzjmBz8nl9N+9mBq7B7ChqBsr6z7GwvpPcrpsZSDrkSn+QeGZOkCdIiO4PPEr+gas4IyuRmenX4nvfRmXijcfeC9Ws/ytsJzRo8HFxbBmym+/GdZPefttw+fsdHCGh8PPP8OSJYadgOztoXlzeOYZk4Ypa6GIB4rb9Q+3O3bFJe46cx79idc3dsfV1fCYl9/6TK1cAAWcndQ57Xut4eBBmPuD5sy8APrHf08PtYYiOpG/PesQWK8ltfr1oN3zT6SrO2bs7KwRcY7XDqyj65HtOCYn4a+68nqxb3Dte5oiZW+TmKzTxWAsNqvagEJY1tWr8P33hi3ZLl8Gb2/DmPH+/Q2J/NYtuHnT8PnWLThzBpYtg4AAwy9906bw0kuG8mG5crkOI6u1UCSBi/uK+HYVxd7sT4Quy/Z3fqH/1EbphsnmZpeemzdhwQJYOv0qj4UuYKDDT9RJMtSmU0qVxq5De2jZEoDvNx4hIfo2zkl38I44R5vQIGKVM4tUf6amvMeFh0pTtksw9sXuZFowq10td1YfCM80/ly2SxM5lpAAq1bB11/D/v33P7dGDXjxRXjhBcPXJiAJXOTYpbnrqfBaF/bZtyBm0Vo6vJC5BZHVJJ3sJMmUFNi40dDZH7zxMo/EbKOT2sxTRbbgcee/OnYydsTZOXPNrgxzk17jO/U68XUSKPHIWYqUu5V2XsZWf2p8GcsvkrxFnuzdC5s2gaurYTZn6kfJkoYat7e3yScDSQIXOXLnTDhxNRtygUoUCdyDd6OsOxdNkSQTEw0re27YAL9v0IQfjiQRR+JwIVHZo+zBzjmBYvXDKNb4HA7F7mT6GVIaEbZKErjIvuRkTj7UgQrhgeybdYAOQ8005f0+4uMNJcb1R8L5cG36Fr6jnQJFunq3lEaELcv1psai8Dn+0ufUDt/BkicW8qIFkjeQtnJg98aeKGV8Gr6URkRhl6cWuFLqbeA1DOXHH7TW0+93vrTAC67UMkjFPQdZ9stIfinZl6Q/vmD6NkmSQliayVvgSql6GJJ3UyAB2KiUWq+1Ppn7MIUlpHZEOl2/wfTfJnOK6nzU60US1x1MK1PILEYhCp68LLlVG9irtY7VWicBO4DupglL5KfJm0KIS0hi0tIfKJsSyRuPjSO2bEq6GjPk0y46Qohsy0sN/AgwXilVBogDngakPmKFLkbF8cSef3gyajujPMdwtnmJ+55rTjLsT4jsy3UC11ofV0p9AWwGYoCDQFLG85RSg4HBAFWqVMnt5YQJZUySZRzBb/d8Dql6rOz1yH2fa85ddMyxxKwQtixPq5ZrrX/UWjfWWrcBrgOZ6t9a6zlaa1+tta+7u3teLidMIDVJ3rtD/JO/bqdaciif+QyFu6M/HO0UjvbpJyOYdRcd7r/ErBAiszwNI1RKeWitryqlqgA9gBamCUuYS8YkWSw2lncOzWebY1vCu3ujYiw3VM+kS8wKUQjkdRz46rs18ETgTa31DRPEJMwoYzJ89bdNlNXXmdD6FXZ/nHkWY36WLiq6uRhdV8Wsmx8LYcXyWkJ5VGtdR2vdUGu91VRBCfO5NxmWu3adN84u4WfXXsR2tHyNeVQnb1wc0++AYu6yjRDWzDp27hQmc2+SHP6LP3akMOvpvox+0vJJspuPJxN71MfTzQWFYW0TmR4vRNZkKn0hk5oMl8/aTN+ItXxb9nVGftiswCTJjJsfCyGyJgm8EOrm40n1Tcu5SUk6bxpPVZ/Slg5JCJELUkIphC4s3039sI3sbP0hVRtL8hbCWkkLvBCK9PsSV0rTfOFQS4cihMgDaYEXMhF//kuj0HXsafwm5aoVtXQ4Qog8kAReyJx7awpxOFNn1jBLhyKEyCNJ4IVIzImL1D+4mB3VXqFacw9LhyOEyCNJ4IXI8SEzcCCJilNGWDoUIYQJSAIvJBKu3cJ7+7fsdO9Fg+7VLR2OEMIEJIEXEoeHfU8JfYsiH42ydChCCBORBF4I6Pg7VFo9nX1F29NyeKZt9YQQVkoSeCFwyG8p5ZIuEjN0NEo9+HwhhHWQBG7rUlIo+cNkjjo2pM3nT1g6GiGECUkCt3Gr/FZQNfY4M2o8T9up2/EPCrd0SEIIE5Gp9DbMPyicEt/O4RLl2dKhHsmyx6QQNkVa4DZs8fc7eCJmO/MqPE+yq6H4LXtMCmE7JIHbsI6/bCQBR1a2b53uuOwxKYRtkARuoxKu3eKFS/6sKtaVqErO6R6TPSaFsA2SwG3UofcWUoJolrbsku647DEphO2QBG6LUlLwWPENwc7NeWXC47LHpBA2Kk+jUJRS7wKDAA0cBl7WWsebIjCRe/9+vYla8Sf5d+A4ejTxpEcTSdhC2KJct8CVUp7AcMBXa10PsAeeN1VgIvfuTJ7BJVWBFlN6WjoUIYQZ5bWE4gC4KKUcAFfgYt5DEnlx9c8QGl7aSFDzIRQvU8TS4QghzCjXCVxrHQ5MAc4Dl4CbWus/TBWYyJ0zI2dxhyLUnjrY0qEIIcwsLyWUUkBXwAuoCBRVSr1k5LzBSqlApVRgRERE7iMVD7R227/U3T+fVcWe5aWAozJtXggbl5cSyuPAWa11hNY6EVgDtMx4ktZ6jtbaV2vt6+7unofLifvxDwonaPg8ihPDwuadCb87bV6SuBC2Ky8J/DzQXCnlqpRSQAfguGnCEjk1ZcMxXv53BX85tCCkseEPpUybF8K25aUGvg9YBfyDYQihHTDHRHGJHKqx6QBeyeeYW69nujW/Zdq8ELYrT+PAtdZjgDEmikXkwSsHfuOcqsKOtulnWcq0eSFsl8zEtAFhvwXzaOwu5j30Atrpv+a3TJsXwrZJArcB4e9/TQxFqTGlv0ybF6IQkQ0drFz06as0OraUnTUG8VLP2rxEbUuHJITIJ9ICt3JHhn2HEwmUnzDc0qEIIfKZJHArlhx7h4c3z2Z3qaep30tq3UIUNpLArVjwhytwT75C0tC3LR2KEMICJIFbK60p/uN0TjrUpuWYjpaORghhAZLArdS/M7dQM+YfznR9FwdH9eAnCCFsjiRwK5U4bjwXlSctv+tv6VCEEBYiwwitgH9QOJM3hXAxKo6Kbi68HR/Dc5E72PTUdDqVdbJ0eEIIC5EEXsD5B4XzwZrDxCUmAxAeFUfpmdOIUO40m/uahaMTQliSlFAKuMmbQtKSN0Ct42E8fjuAH7xewa2iqwUjE0JYmiTwAi7jaoJvbl/LDdz4qWMzC0UkhCgoJIEXcPeuJlj99GWeid7EdxX7U6pqSQtGJYQoCCSBF3CjOnnj4mgPwOtbfiGaYqx+pr2sMiiEkE7Mgi51NcFF3+6kZ9RvfFtxMB+/7iurDAohJIFbg24+npT7czMJFKHbL2Op5FPO0iEJIQoAKaFYgfMbj/HIv4vYVXcwlZpI8hZCGEgLvKDTmuv93qY4xan388dphzNO7hnVyVvKKkIUMtICL+AOfLqORte2cKDr/yhf37DbfOrknvCoODSGyT0frDmMf1C4ZYMVQuQrSeAF2J2oODwmvcuJInVps3RI2vGMk3sA4hKTmbwpJL9DFEJYUK4TuFLKWykVfM/HLaXUO6YMrrDb2/srKieFcuuzGRRx/a/alXFyz4OOCyFsU65r4FrrEKARgFLKHggH1pooLpuT05r1xX0XeGTLBHZX7EXL0e3TPVbRzYVwI8n63kk/QgjbZ6oSSgfgtNb6nIl+nk3JTc06tPcoFJrKy6dkeuzeyT2pXBztZXKPEIWMqRL488DPJvpZNienNeug6TtoeWE5+9r6Ubn1Q5ke7+bjycQe9fF0c0EBnm4uTOxRX0ahCFHIKK113n6AUkWAi0BdrfUVI48PBgYDVKlSpcm5c4Wvke7ltx5j/8oKODupc7pjsZFxhHk2xTUpmjJXj+NSWsoiQhR2SqkDWmvfjMdNMQ78KeAfY8kbQGs9B5gD4Ovrm7e/FlYqq5p1SRdHWk3allYXH9mxJqV6fULbO0c48NkGKknyFkLchylKKH2R8sl9GatZO9opbickpauL73lhLm1DF/BXhzE0+fgpywQrhLAaeUrgSilXoCOwxjTh2CZjNetizg4kJv/3hqTu/kt8fmICm4p14P12rfHyW0+rSdtkco4QIkt5roHnhK+vrw4MDMy36xVk99bF3cLi2bDkLWLtnOn++hdEl/hvpx0XR3vpoBSikMuqBi4zMS0kdcy2Xaxm5vKvKMlNXu/xYbrkDTLDUgiRNUngFjKqkzdO2gG/hatonbSHES38OF29gtFzZYalEMIYWY0wC+Ze7a+RUym++nYuXaJXMaPqQI4824pSCUnciE3MdK7MsBRCGCMtcCPMvdrfn8vCiWrQhqejV3P8lckMPzOPXX7tGfNMXZlhKYTINkngRphrtT+t4ae3/6Z630eooUO4/P0v1P5xJCgFyAxLIUTOSAnFCHOs9rd/bwq7hyzi9eAhRLuWR23/g4pN62U6r5uPpyRsIUS2SAvciKxqzjmtRScmwoolifyvxiKKt6jLO8Evc83rEdzP7sfVSPIWQoickARuRF5W+7t5E/74A8b5xTHWYzZNX6rBp6cGULZiEWLnLaPyye0oD3dzhS6EKESkhGJEagkj4ygUIN3aJSM6eFPT2ZPAQNi7R3MpIISqJzfzOJt5lwBKEM31WjNs3lgAABSFSURBVC1I/mIW7s88nVbrFkIIU5CZmNnkHxSO38ojXA8pQ/y5MiRcLonHlZs8lvQX7djOE2oLlfQFAGIrVMPhqSco0v95aNNGErcQIk/MuRqhzTt6FIYOT+bagdY8FbeFZ9Vs2toFUD35LADJJUth174ddPoIOnbEtVo1C0cshCgMJIHfx8qVMGUKnNx/nVfVMobZf8NDhHGzSFH2VanPksqPs7dKfTb8+CbYSXeCECJ/SQI34vZtGDYM/lpwks/dvqKH4yIcE+PYU7E+E5r0Z8vDzUi2M3Ryurk40urLgEy1cnPO4hRCCJAEDqSfNl8yvizX1jXm0dDVHHV8Fcf4FFT/F9nWsQ9vHklON8EndU3vqDjD9PfwqDhGrTwIirSlYlNncQKSxIUQJlXo3/enTpsPuxHHreDKHJvZkFHhI/iZvhRp1hh1+jTMnUv7Ph0fuKY3QGKKznRMVhQUQphDoW+BT94UQmxCMtc31aPoQSe2OrXn0Tt7WNGyB89tWwaOjmnnZpwl6eW3PtvXkRUFhRCmVuhb4Bej4oj+24s6By/zj2MjfJP/YfgzI3n/0VfSJW9jcjIzU1YUFEKYWqFP4C5XPXHb7sTvdk+SWFTRvd8UfqnTNlsJN6u9Lh3t04/7lhUFhRDmUKhLKCdOQMSK6mx1aImdfRIv9fmcC27ls51w7zdjU0ahCCHMrdAm8Js34dlnNN8lvUH95KO899IEwtzK45nDhJvV6oGSsIUQ5lYoE3hyMvTtC51PfU3PlKUwfjxTP/RjqqUDE0KIHMhTDVwp5aaUWqWU+lcpdVwp1cJUgZnT2LEQ+3sAkxkJ3bqBn5+lQxJCiBzLawv8a2Cj1rqXUqoI4PqgJ1ja7HWXWTAhgX/se3GhdEUOj5hIF5kGL4SwQrlO4EqpEkAbYCCA1joBSDBNWObhHxTO+6Ps8dcDcbGP5flnP+fiH6EkFSsuNWshhNXJS9OzGhABzFdKBSml5iqlipooLrP4ePZV2p78mw56O18+1p/TZSvLLEkhhNXKSwJ3ABoD32qtfYDbQKZislJqsFIqUCkVGBERkYfL5U1yMpzxr8Jku5GcKlWJpY2eSntMZkkKIaxRXhJ4GBCmtd539/tVGBJ6OlrrOVprX621r7u75bYSmz8fBl5bTq2UE0xq9zJJ9v9Vj2SWpBDCGuW6Bq61vqyUuqCU8tZahwAdgGOmC810bt2CSR/cZL/9GPZVasCWh5umPSazJIUQ1iqvo1DeApbcHYFyBng57yGZ3oQJMOjaREpzjdjxi/C84CSzJIUQVi9PCVxrHQxk2qetIDl7FlZPPcdRu+nwYj/avfgUuywdlBBCmIDNz8T85BP4POVDHB0VjB9v6XCEyFeJiYmEhYURHx9v6VBENjg7O1OpUiUcH7ASaiqbTuAXLsDpn/fTJ2UpvP8hVK5s6ZCEyFdhYWEUL16cqlWropR68BOExWitiYyMJCwsDC8vr2w9x6anIM6cCeNSPiG5jIdMlxeFUnx8PGXKlJHkbQWUUpQpUyZH75ZsNoHHxMC2mYd5gj+YWvdJWs36G/+gcEuHJUS+k+RtPXL6WtlsCWXE51EMip1JnH0RljbsxA3ZXFgIYWNssgWekgLr50TTj8X4123LDdeSgGwuLMSD+AeF02rSNrz81tNq0jaTvGu1t7enUaNG1K1bl4YNGzJ16lRSUlLu+5zQ0FCWLl2a52vbOptM4OvXQ78bS3AljgW+z6Z7TKbNC2Gcf1A4H6w5THhUHBoIv/uuNa9J3MXFheDgYI4ePcrmzZvZsGED48aNu+9zJIFnj00m8BlfJfKmmslfVRoS4l413WMybV4I4yZvCiEuMTndMVO/a/Xw8GDOnDnMnDkTrTWhoaE8+uijNG7cmMaNG7N7924A/Pz8+PPPP2nUqBHTpk3L8rzCzuZq4MHBUHrHGioTzoTmg9I9JtPmhchaVu9OTf2utVq1aqSkpHD16lU8PDzYvHkzzs7OnDx5kr59+xIYGMikSZOYMmUKv/32GwCxsbFGzyvsbC6BT58O79p9TfJD1ek0+lUObT4p0+aFyIaKbi6EG0nW5njXqrUGDBONhg0bRnBwMPb29pw4ccLo+dk9r7CxmQTuHxTO+FVnUYvtaZ6yh0O9/0e3JpXp1kQm7wiRHaM6efPBmsPpyijmeNd65swZ7O3t8fDwYNy4cZQrV46DBw+SkpKCs7Oz0edMmzYtW+cVNjZRA0/tfDkZ4MHbKTO55ViUl3VdGfctRA508/FkYo/6eLq5oABPNxcm9qhv0netERERvPHGGwwbNgylFDdv3qRChQrY2dmxePFikpMNfzyKFy9OdHR02vOyOq+ws4kW+ORNIcTeSabEQTueYwULG3Ym0s6JyZtCpGQiRA508/E0+f+ZuLg4GjVqRGJiIg4ODvTr148RI0YAMHToUHr27MnKlStp164dRYsaNvVq0KABDg4ONGzYkIEDB2Z5XmFnEwn8YlQc8efKMuz2QuxJZmGTZ9KOCyEs636t5Ro1anDo0KG07ydOnAiAo6MjW7duTXeusfMKO5sooVR0cyH2cAVeZj4BXr5ccCufdlwIIWyVTSTwoS1r0SLkGJUIZ1WDDoAMGRRC2D6bSOCxIRXpn/ITt5yKs/XhpmbpfBFCiILGJmrgK+be4he1BueBAwiZ0t3S4QghRL6w+gR+4gRU3r8KF+Jg4ABLhyOEEPnG6ksoCxfCABaSVK0mNGtm6XCEECLfWHULPDkZts87y3h2wqvjQRauF6JAiYyMpEMHw8CCy5cvY29vj7u7OwD79++nSJEilgzP6uUpgSulQoFoIBlI0lrn6w7127dDx8uL0Eqh+vXLz0sLIbKhTJkyBAcHAzB27FiKFSvGyJEj052jtUZrjZ2d1RcE8p0pWuDttNbXTPBzcmzh/BQ+s1tIymPtsZcNi4W4r3feMazWaUqNGhkWkMupU6dO0a1bN1q3bs2+ffvw9/enYcOGREVFAbBs2TK2bNnC3LlzuXLlCkOGDOH8+fPY2dkxY8YMmjdvbtobsVJW+yfv5k24vOovqqacxf5l6bwUwtocO3aMV199laCgIDw9sx7yO3z4cEaPHk1gYCArVqxg0KBBWZ5b2OS1Ba6BP5RSGvheaz3HBDFly8qV8HzCQpJdi2Hfo0d+XVYIq5WblrI5Va9enUceeeSB523ZsoWQkP82lbhx4wZxcXG4uMhM67wm8FZa64tKKQ9gs1LqX631zntPUEoNBgYDVKlSJY+XM/APCufjz+EEK9lYqxWJJ6Lo5iOL2whhTe5dkMrOzi5tjXCA+Pj4tK+11tLhmYU8lVC01hfvfr4KrAWaGjlnjtbaV2vtm9r7nBf+QeGMXHCCDue2U4JoFns/ZpJ9+4QQlmNnZ0epUqU4efIkKSkprF27Nu2xxx9/nFmzZqV9H2zqQr4Vy3UCV0oVVUoVT/0aeAI4YqrAsjJ5UwjXj3jwIksJK1aOfZXryW7zQtiAL774gieffJIOHTpQqVKltOOzZs1i165dNGjQgDp16vDDDz9YMMqCJS8llHLAWmUYe+0ALNVabzRJVPdxMSoOp6POdGQzP9btilZ2aceFEAXX2LFj075++OGHM7Wk+/TpQ58+fTI9z93dnVWrVpk7PKuU6wSutT4DNDRhLNlSOqUUja9sw5Ekfq31aNpxWTpWCFHYWN0wwjpxdenDcs6U9ORoueqALB0rhCicrC6Bh22Npx3b2dm4HUopWTpWCFFoWdVaKMeOQZ3jq7AnhYEz3mdgvXqWDkkIISzGqlrgy5dDH5aT6F0XJHkLIQo5q0ngWsP2xWG04U8cX8zcUy2EEIWN1STw4GBocnal4RsjQ42EEAVTWFgYXbt2pUaNGlSvXp23336bhIQEAAICAujSpUum5/z222/4+PjQsGFD6tSpw/fff2/2OBcsWMCwYcMA+O6771i0aFGW54aGhrJ06dK07wMDAxk+fLjZY8zIahL4smXQl2Uk1feBmjUtHY4QIhu01vTo0YNu3bpx8uRJTpw4QUxMDB999FGWz0lMTGTw4MH8+uuvHDx4kKCgINq2bZur6ycnJ+fqeW+88Qb9+/fP8vGMCdzX15cZM2bk6lp5YRWdmFrDrp/O8gX74cVJlg5HCOtkgfVkt23bhrOzMy+//DIA9vb2TJs2DS8vL8aNG2f0OdHR0SQlJVGmTBkAnJyc8PbOPEx47NixnD59mvDwcC5cuMDo0aN57bXXCAgIYNy4cVSoUIHg4GCOHTvGTz/9xIwZM0hISKBZs2bMnj0be3t75s+fz8SJE6lQoQI1a9bEyckp7Wenrl1+6tQp3njjDSIiIrC3t2flypX4+flx/PhxGjVqxIABA/Dx8WHKlCn89ttvXL9+nVdeeYUzZ87g6urKnDlzaNCgAWPHjuX8+fOcOXOG8+fP88477+S51W4VCXzvXmh1cYXhm+ees2wwQohsO3r0KE2aNEl3rESJElSpUoVTp04ZfU7p0qV59tlneeihh+jQoQNdunShb9++Rjd8OHToEHv37uX27dv4+PjQuXNnwLDbz5EjR/Dy8uL48eMsX76cXbt24ejoyNChQ1myZAkdO3ZkzJgxHDhwgJIlS9KuXTt8fHwyXePFF1/Ez8+P7t27Ex8fT0pKCpMmTUpL2GAoBaUaM2YMPj4++Pv7s23bNvr375826/Tff/9l+/btREdH4+3tzZAhQ3B0dMzVvy1YSQJftgxeVstIatIMBy8vS4cjhHWywHqyWmuUka0Oszqeau7cuRw+fJgtW7YwZcoUNm/ezIIFCzKd17VrV1xcXHBxcaFdu3bs378fNzc3mjZtitfdXLF161YOHDiQtnRtXFwcHh4e7Nu3j7Zt26Zt8danTx9OnDiR7udHR0cTHh5O9+7dAXB2dn7gPf/111+sXr0agPbt2xMZGcnNmzcB6Ny5M05OTjg5OeHh4cGVK1fSrfuSUwW+Bu4fFM6Za6topIOZXa6xrDoohBWpW7cugYGB6Y7dunWLCxcuUL169fs+t379+rz77rts3rw5LSFmlPGPQOr39y5Vq7VmwIABBAcHExwcTEhISNq6LPf7I5L63Jwy9pzU66SWaMBQTkpKSsrxz79XgU7g/kHhfLDmMG3P+wOwtEozWTpWCCvSoUMHYmNj00Z0JCcn89577zFw4EBcXV2NPicmJiZdSSI4OJiHHnrI6Lnr1q0jPj6eyMhIAgICjG4Q0aFDB1atWsXVq1cBuH79OufOnaNZs2YEBAQQGRlJYmIiK1euzPTcEiVKUKlSJfz9DTnozp07xMbGUrx4caKjo43G1KZNG5YsWQIYSitly5alRIkSWfwL5U2BTuCTN4UQl5jM5eJl+bnBE1wuUVaWjhXCiiilWLt2LStXrqRGjRrUrFkTZ2dnJkyYkHbO1q1bqVSpUtpHUFAQX375Jd7e3jRq1IgxY8YYLZ8ANG3alM6dO9O8eXM++eQTKlasmOmcOnXq8Pnnn/PEE0/QoEEDOnbsyKVLl6hQoQJjx46lRYsWPP744zRu3NjoNRYvXsyMGTNo0KABLVu25PLlyzRo0AAHBwcaNmzItGnT0p0/duxYAgMDadCgAX5+fixcuDD3/4APoHLzFiG3fH19dca3U/fj5bceY9Ep4OykziaLSwhbdfz4cWrXrm3pMMwiq13urZ2x10wpdUBr7Zvx3ALdAs9qiVhZOlYIIQr4KJRRnbz5YM1h4hL/G4wvS8cKISD9BhGFVYFO4KlLxE7eFMLFqDgqurkwqpO3LB0rRA48aMieKDhyWtIu0AkcDElcErYQuePs7ExkZCRlypSRJF7Aaa2JjIzM1ljzVAU+gQshcq9SpUqEhYURERFh6VBENjg7O+doYo8kcCFsmKOjY9qMRGF7CvQoFCGEEFmTBC6EEFZKErgQQlipfJ2JqZSKAM7l8ullgWsmDMcayD0XDnLPhUNe7vkhrbV7xoP5msDzQikVaGwqqS2Tey4c5J4LB3Pcs5RQhBDCSkkCF0IIK2VNCXyOpQOwALnnwkHuuXAw+T1bTQ1cCCFEetbUAhdCCHEPSeBCCGGlrCKBK6WeVEqFKKVOKaX8LB1PflBKhSqlDiulgpVS2d/GyIoopeYppa4qpY7cc6y0UmqzUurk3c+lLBmjqWVxz2OVUuF3X+tgpdTTlozRlJRSlZVS25VSx5VSR5VSb989brOv833u2eSvc4GvgSul7IETQEcgDPgb6Ku1PmbRwMxMKRUK+GqtbXayg1KqDRADLNJa17t77EvgutZ60t0/1qW01u9bMk5TyuKexwIxWusplozNHJRSFYAKWut/lFLFgQNAN2AgNvo63+een8PEr7M1tMCbAqe01me01gnAMqCrhWMSJqC13glcz3C4K5C6C+xCDL/4NiOLe7ZZWutLWut/7n4dDRwHPLHh1/k+92xy1pDAPYEL93wfhpn+MQoYDfyhlDqglBps6WDyUTmt9SUw/EcAPCwcT34ZppQ6dLfEYjPlhHsppaoCPsA+CsnrnOGewcSvszUkcGPbiBTsuo9ptNJaNwaeAt68+9Zb2KZvgepAI+AS8JVlwzE9pVQxYDXwjtb6lqXjyQ9G7tnkr7M1JPAwoPI931cCLloolnyjtb549/NVYC2GUlJhcOVuDTG1lnjVwvGYndb6itY6WWudAvyAjb3WSilHDIlsidZ6zd3DNv06G7tnc7zO1pDA/wZqKKW8lFJFgOeBXywck1kppYre7fxAKVUUeAI4cv9n2YxfgAF3vx4ArLNgLPkiNZHd1R0beq2VYSPOH4HjWuup9zxks69zVvdsjte5wI9CAbg73GY6YA/M01qPt3BIZqWUqoah1Q2Gbe+W2uI9K6V+BtpiWGbzCjAG8AdWAFWA80BvrbXNdPplcc9tMbyt1kAo8HpqfdjaKaVaA38Ch4GUu4c/xFATtsnX+T733BcTv85WkcCFEEJkZg0lFCGEEEZIAhdCCCslCVwIIayUJHAhhLBSksCFEMJKSQIXQggrJQlcCCGs1P8BRTs9flSL6WEAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.plot(x1, y, 'o', label=\"Data\")\n",
    "ax.plot(x1, y_true, 'b-', label=\"True\")\n",
    "ax.plot(np.hstack((x1, x1n)), np.hstack((ypred, ynewpred)), 'r', label=\"OLS prediction\")\n",
    "ax.legend(loc=\"best\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Predicting with Formulas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using formulas can make both estimation and prediction a lot easier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "from statsmodels.formula.api import ols\n",
    "\n",
    "data = {\"x1\" : x1, \"y\" : y}\n",
    "\n",
    "res = ols(\"y ~ x1 + np.sin(x1) + I((x1-5)**2)\", data=data).fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We use the `I` to indicate use of the Identity transform. Ie., we do not want any expansion magic from using `**2`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Intercept           4.943408\n",
       "x1                  0.510074\n",
       "np.sin(x1)          0.493242\n",
       "I((x1 - 5) ** 2)   -0.020717\n",
       "dtype: float64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.params"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we only have to pass the single variable and we get the transformed right-hand side variables automatically"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    10.914410\n",
       "1    10.764154\n",
       "2    10.502502\n",
       "3    10.173535\n",
       "4     9.835279\n",
       "5     9.545497\n",
       "6     9.347549\n",
       "7     9.259774\n",
       "8     9.271001\n",
       "9     9.343283\n",
       "dtype: float64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.predict(exog=dict(x1=x1n))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
