{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Prediction (out of sample)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import statsmodels.api as sm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Artificial data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "nsample = 50\n",
    "sig = 0.25\n",
    "x1 = np.linspace(0, 20, nsample)\n",
    "X = np.column_stack((x1, np.sin(x1), (x1-5)**2))\n",
    "X = sm.add_constant(X)\n",
    "beta = [5., 0.5, 0.5, -0.02]\n",
    "y_true = np.dot(X, beta)\n",
    "y = y_true + sig * np.random.normal(size=nsample)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Estimation "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.984\n",
      "Model:                            OLS   Adj. R-squared:                  0.983\n",
      "Method:                 Least Squares   F-statistic:                     963.0\n",
      "Date:                Sat, 14 Dec 2019   Prob (F-statistic):           1.68e-41\n",
      "Time:                        18:14:18   Log-Likelihood:                 2.4640\n",
      "No. Observations:                  50   AIC:                             3.072\n",
      "Df Residuals:                      46   BIC:                             10.72\n",
      "Df Model:                           3                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const          5.0078      0.082     61.182      0.000       4.843       5.173\n",
      "x1             0.5069      0.013     40.152      0.000       0.481       0.532\n",
      "x2             0.4869      0.050      9.812      0.000       0.387       0.587\n",
      "x3            -0.0212      0.001    -19.171      0.000      -0.023      -0.019\n",
      "==============================================================================\n",
      "Omnibus:                        0.757   Durbin-Watson:                   2.537\n",
      "Prob(Omnibus):                  0.685   Jarque-Bera (JB):                0.740\n",
      "Skew:                           0.274   Prob(JB):                        0.691\n",
      "Kurtosis:                       2.763   Cond. No.                         221.\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "olsmod = sm.OLS(y, X)\n",
    "olsres = olsmod.fit()\n",
    "print(olsres.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## In-sample prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 4.47657439  4.95990844  5.40440945  5.78354109  6.08034384  6.29022143\n",
      "  6.42169593  6.49500769  6.53878979  6.58536382  6.66542946  6.80302064\n",
      "  7.01155683  7.29163823  7.63094723  8.00627207  8.38732054  8.74169685\n",
      "  9.04022421  9.26173846  9.3965653   9.44810976  9.43229672  9.37495455\n",
      "  9.30757156  9.26212254  9.26581543  9.3366211   9.4803208   9.68955633\n",
      "  9.94503894 10.21871845 10.47839181 10.69299393 10.83770164 10.89801203\n",
      " 10.87212528 10.7712403  10.61771483 10.44139212 10.27469776 10.14731224\n",
      " 10.08129455 10.08745794 10.16359332 10.29483222 10.45608966 10.6161855\n",
      " 10.74296727 10.80859272]\n"
     ]
    }
   ],
   "source": [
    "ypred = olsres.predict(X)\n",
    "print(ypred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create a new sample of explanatory variables Xnew, predict and plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[10.77883205 10.61961199 10.35002743 10.0135932   9.66759015  9.36904075\n",
      "  9.16074805  9.06081597  9.05821684  9.11549138]\n"
     ]
    }
   ],
   "source": [
    "x1n = np.linspace(20.5,25, 10)\n",
    "Xnew = np.column_stack((x1n, np.sin(x1n), (x1n-5)**2))\n",
    "Xnew = sm.add_constant(Xnew)\n",
    "ynewpred =  olsres.predict(Xnew) # predict out of sample\n",
    "print(ynewpred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot comparison"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.plot(x1, y, 'o', label=\"Data\")\n",
    "ax.plot(x1, y_true, 'b-', label=\"True\")\n",
    "ax.plot(np.hstack((x1, x1n)), np.hstack((ypred, ynewpred)), 'r', label=\"OLS prediction\")\n",
    "ax.legend(loc=\"best\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Predicting with Formulas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using formulas can make both estimation and prediction a lot easier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "from statsmodels.formula.api import ols\n",
    "\n",
    "data = {\"x1\" : x1, \"y\" : y}\n",
    "\n",
    "res = ols(\"y ~ x1 + np.sin(x1) + I((x1-5)**2)\", data=data).fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We use the `I` to indicate use of the Identity transform. Ie., we do not want any expansion magic from using `**2`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Intercept           5.007776\n",
       "x1                  0.506855\n",
       "np.sin(x1)          0.486913\n",
       "I((x1 - 5) ** 2)   -0.021248\n",
       "dtype: float64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.params"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we only have to pass the single variable and we get the transformed right-hand side variables automatically"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    10.778832\n",
       "1    10.619612\n",
       "2    10.350027\n",
       "3    10.013593\n",
       "4     9.667590\n",
       "5     9.369041\n",
       "6     9.160748\n",
       "7     9.060816\n",
       "8     9.058217\n",
       "9     9.115491\n",
       "dtype: float64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.predict(exog=dict(x1=x1n))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
