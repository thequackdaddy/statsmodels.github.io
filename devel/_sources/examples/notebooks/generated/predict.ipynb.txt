{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Prediction (out of sample)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import statsmodels.api as sm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Artificial data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "nsample = 50\n",
    "sig = 0.25\n",
    "x1 = np.linspace(0, 20, nsample)\n",
    "X = np.column_stack((x1, np.sin(x1), (x1-5)**2))\n",
    "X = sm.add_constant(X)\n",
    "beta = [5., 0.5, 0.5, -0.02]\n",
    "y_true = np.dot(X, beta)\n",
    "y = y_true + sig * np.random.normal(size=nsample)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Estimation "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.987\n",
      "Model:                            OLS   Adj. R-squared:                  0.986\n",
      "Method:                 Least Squares   F-statistic:                     1133.\n",
      "Date:                Sat, 14 Dec 2019   Prob (F-statistic):           4.21e-43\n",
      "Time:                        18:55:37   Log-Likelihood:                 5.2621\n",
      "No. Observations:                  50   AIC:                            -2.524\n",
      "Df Residuals:                      46   BIC:                             5.124\n",
      "Df Model:                           3                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const          4.9174      0.077     63.536      0.000       4.762       5.073\n",
      "x1             0.4865      0.012     40.754      0.000       0.462       0.510\n",
      "x2             0.4243      0.047      9.043      0.000       0.330       0.519\n",
      "x3            -0.0178      0.001    -16.960      0.000      -0.020      -0.016\n",
      "==============================================================================\n",
      "Omnibus:                        2.755   Durbin-Watson:                   1.660\n",
      "Prob(Omnibus):                  0.252   Jarque-Bera (JB):                2.393\n",
      "Skew:                           0.430   Prob(JB):                        0.302\n",
      "Kurtosis:                       2.360   Cond. No.                         221.\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "olsmod = sm.OLS(y, X)\n",
    "olsres = olsmod.fit()\n",
    "print(olsres.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## In-sample prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 4.473068    4.90963703  5.3126115   5.65886574  5.93361999  6.13286871\n",
      "  6.26403868  6.34476878  6.400012    6.45793569  6.5452938   6.68303124\n",
      "  6.8828427   7.14525128  7.45952247  7.80542789  8.15656868  8.4847128\n",
      "  8.76443347  8.97728671  9.11484163  9.1800656   9.18683675  9.15766379\n",
      "  9.11998791  9.10167428  9.12643387  9.20992781  9.35719431  9.56182089\n",
      "  9.80699794 10.06828048 10.31760443 10.52789741 10.67752671 10.75385344\n",
      " 10.7553091  10.69165323 10.58237001 10.453467   10.33320223 10.24744143\n",
      " 10.21540842 10.24652664 10.33887093 10.47948384 10.64650448 10.8127602\n",
      " 10.95023101 11.03465315]\n"
     ]
    }
   ],
   "source": [
    "ypred = olsres.predict(X)\n",
    "print(ypred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create a new sample of explanatory variables Xnew, predict and plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[11.04241307 10.93772391 10.73722634 10.47884234 10.21249062  9.9878647\n",
      "  9.84226628  9.79147243  9.82587283  9.91282275]\n"
     ]
    }
   ],
   "source": [
    "x1n = np.linspace(20.5,25, 10)\n",
    "Xnew = np.column_stack((x1n, np.sin(x1n), (x1n-5)**2))\n",
    "Xnew = sm.add_constant(Xnew)\n",
    "ynewpred =  olsres.predict(Xnew) # predict out of sample\n",
    "print(ynewpred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot comparison"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.plot(x1, y, 'o', label=\"Data\")\n",
    "ax.plot(x1, y_true, 'b-', label=\"True\")\n",
    "ax.plot(np.hstack((x1, x1n)), np.hstack((ypred, ynewpred)), 'r', label=\"OLS prediction\")\n",
    "ax.legend(loc=\"best\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Predicting with Formulas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using formulas can make both estimation and prediction a lot easier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "from statsmodels.formula.api import ols\n",
    "\n",
    "data = {\"x1\" : x1, \"y\" : y}\n",
    "\n",
    "res = ols(\"y ~ x1 + np.sin(x1) + I((x1-5)**2)\", data=data).fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We use the `I` to indicate use of the Identity transform. Ie., we do not want any expansion magic from using `**2`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Intercept           4.917433\n",
       "x1                  0.486456\n",
       "np.sin(x1)          0.424331\n",
       "I((x1 - 5) ** 2)   -0.017775\n",
       "dtype: float64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.params"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we only have to pass the single variable and we get the transformed right-hand side variables automatically"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    11.042413\n",
       "1    10.937724\n",
       "2    10.737226\n",
       "3    10.478842\n",
       "4    10.212491\n",
       "5     9.987865\n",
       "6     9.842266\n",
       "7     9.791472\n",
       "8     9.825873\n",
       "9     9.912823\n",
       "dtype: float64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.predict(exog=dict(x1=x1n))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
