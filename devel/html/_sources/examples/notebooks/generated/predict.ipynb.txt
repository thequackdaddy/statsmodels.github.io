{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Prediction (out of sample)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import statsmodels.api as sm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Artificial data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "nsample = 50\n",
    "sig = 0.25\n",
    "x1 = np.linspace(0, 20, nsample)\n",
    "X = np.column_stack((x1, np.sin(x1), (x1-5)**2))\n",
    "X = sm.add_constant(X)\n",
    "beta = [5., 0.5, 0.5, -0.02]\n",
    "y_true = np.dot(X, beta)\n",
    "y = y_true + sig * np.random.normal(size=nsample)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Estimation "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.977\n",
      "Model:                            OLS   Adj. R-squared:                  0.976\n",
      "Method:                 Least Squares   F-statistic:                     656.6\n",
      "Date:                Sun, 15 Dec 2019   Prob (F-statistic):           9.48e-38\n",
      "Time:                        15:25:47   Log-Likelihood:                -7.6738\n",
      "No. Observations:                  50   AIC:                             23.35\n",
      "Df Residuals:                      46   BIC:                             31.00\n",
      "Df Model:                           3                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const          4.9601      0.100     49.478      0.000       4.758       5.162\n",
      "x1             0.5074      0.015     32.822      0.000       0.476       0.539\n",
      "x2             0.5028      0.061      8.272      0.000       0.380       0.625\n",
      "x3            -0.0209      0.001    -15.365      0.000      -0.024      -0.018\n",
      "==============================================================================\n",
      "Omnibus:                        1.716   Durbin-Watson:                   2.399\n",
      "Prob(Omnibus):                  0.424   Jarque-Bera (JB):                1.192\n",
      "Skew:                          -0.076   Prob(JB):                        0.551\n",
      "Kurtosis:                       2.259   Cond. No.                         221.\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "olsmod = sm.OLS(y, X)\n",
    "olsres = olsmod.fit()\n",
    "print(olsres.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## In-sample prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 4.43865072  4.92698845  5.37558968  5.7570544   6.05387112  6.26129398\n",
      "  6.38812242  6.45525553  6.49225831  6.5325043   6.60769236  6.74263862\n",
      "  6.95119932  7.2339942   7.57830475  7.96016375  8.34829307  8.70924256\n",
      "  9.01288582  9.23736988  9.37270557  9.42240872  9.40292255  9.34091603\n",
      "  9.26890231  9.21989684  9.2219931   9.29374684  9.44112749  9.65653733\n",
      "  9.92005987 10.20273196 10.47130245 10.69369522 10.84427916 10.90807936\n",
      " 10.88323741 10.7813167  10.62540266 10.44630982 10.27751912 10.14967703\n",
      " 10.08556051 10.09633472 10.17971868 10.32036001 10.4923573  10.66351559\n",
      " 10.80063596 10.87497001]\n"
     ]
    }
   ],
   "source": [
    "ypred = olsres.predict(X)\n",
    "print(ypred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create a new sample of explanatory variables Xnew, predict and plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[10.85278347 10.69746494 10.42873077 10.09151206  9.74495393  9.44793476\n",
      "  9.24465068  9.15379483  9.16398064  9.23652963]\n"
     ]
    }
   ],
   "source": [
    "x1n = np.linspace(20.5,25, 10)\n",
    "Xnew = np.column_stack((x1n, np.sin(x1n), (x1n-5)**2))\n",
    "Xnew = sm.add_constant(Xnew)\n",
    "ynewpred =  olsres.predict(Xnew) # predict out of sample\n",
    "print(ynewpred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot comparison"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.plot(x1, y, 'o', label=\"Data\")\n",
    "ax.plot(x1, y_true, 'b-', label=\"True\")\n",
    "ax.plot(np.hstack((x1, x1n)), np.hstack((ypred, ynewpred)), 'r', label=\"OLS prediction\")\n",
    "ax.legend(loc=\"best\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Predicting with Formulas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using formulas can make both estimation and prediction a lot easier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "from statsmodels.formula.api import ols\n",
    "\n",
    "data = {\"x1\" : x1, \"y\" : y}\n",
    "\n",
    "res = ols(\"y ~ x1 + np.sin(x1) + I((x1-5)**2)\", data=data).fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We use the `I` to indicate use of the Identity transform. Ie., we do not want any expansion magic from using `**2`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Intercept           4.960098\n",
       "x1                  0.507445\n",
       "np.sin(x1)          0.502760\n",
       "I((x1 - 5) ** 2)   -0.020858\n",
       "dtype: float64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.params"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we only have to pass the single variable and we get the transformed right-hand side variables automatically"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    10.852783\n",
       "1    10.697465\n",
       "2    10.428731\n",
       "3    10.091512\n",
       "4     9.744954\n",
       "5     9.447935\n",
       "6     9.244651\n",
       "7     9.153795\n",
       "8     9.163981\n",
       "9     9.236530\n",
       "dtype: float64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.predict(exog=dict(x1=x1n))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
