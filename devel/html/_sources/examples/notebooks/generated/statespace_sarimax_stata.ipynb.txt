{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SARIMAX: Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This notebook replicates examples from the Stata ARIMA time series estimation and postestimation documentation.\n",
    "\n",
    "First, we replicate the four estimation examples http://www.stata.com/manuals13/tsarima.pdf:\n",
    "\n",
    "1. ARIMA(1,1,1) model on the U.S. Wholesale Price Index (WPI) dataset.\n",
    "2. Variation of example 1 which adds an MA(4) term to the ARIMA(1,1,1) specification to allow for an additive seasonal effect.\n",
    "3. ARIMA(2,1,0) x (1,1,0,12) model of monthly airline data. This example allows a multiplicative seasonal effect.\n",
    "4. ARMA(1,1) model with exogenous regressors; describes consumption as an autoregressive process on which also the money supply is assumed to be an explanatory variable.\n",
    "\n",
    "Second, we demonstrate postestimation capabilities to replicate http://www.stata.com/manuals13/tsarimapostestimation.pdf. The model from example 4 is used to demonstrate:\n",
    "\n",
    "1. One-step-ahead in-sample prediction\n",
    "2. n-step-ahead out-of-sample forecasting\n",
    "3. n-step-ahead in-sample dynamic prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from scipy.stats import norm\n",
    "import statsmodels.api as sm\n",
    "import matplotlib.pyplot as plt\n",
    "from datetime import datetime\n",
    "import requests\n",
    "from io import BytesIO\n",
    "# Register converters to avoid warnings\n",
    "pd.plotting.register_matplotlib_converters()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ARIMA Example 1: Arima\n",
    "\n",
    "As can be seen in the graphs from Example 2, the Wholesale price index (WPI) is growing over time (i.e. is not stationary). Therefore an ARMA model is not a good specification. In this first example, we consider a model where the original time series is assumed to be integrated of order 1, so that the difference is assumed to be stationary, and fit a model with one autoregressive lag and one moving average lag, as well as an intercept term.\n",
    "\n",
    "The postulated data process is then:\n",
    "\n",
    "$$\n",
    "\\Delta y_t = c + \\phi_1 \\Delta y_{t-1} + \\theta_1 \\epsilon_{t-1} + \\epsilon_{t}\n",
    "$$\n",
    "\n",
    "where $c$ is the intercept of the ARMA model, $\\Delta$ is the first-difference operator, and we assume $\\epsilon_{t} \\sim N(0, \\sigma^2)$. This can be rewritten to emphasize lag polynomials as (this will be useful in example 2, below):\n",
    "\n",
    "$$\n",
    "(1 - \\phi_1 L ) \\Delta y_t = c + (1 + \\theta_1 L) \\epsilon_{t}\n",
    "$$\n",
    "\n",
    "where $L$ is the lag operator.\n",
    "\n",
    "Notice that one difference between the Stata output and the output below is that Stata estimates the following model:\n",
    "\n",
    "$$\n",
    "(\\Delta y_t - \\beta_0) = \\phi_1 ( \\Delta y_{t-1} - \\beta_0) + \\theta_1 \\epsilon_{t-1} + \\epsilon_{t}\n",
    "$$\n",
    "\n",
    "where $\\beta_0$ is the mean of the process $y_t$. This model is equivalent to the one estimated in the statsmodels SARIMAX class, but the interpretation is different. To see the equivalence, note that:\n",
    "\n",
    "$$\n",
    "(\\Delta y_t - \\beta_0) = \\phi_1 ( \\Delta y_{t-1} - \\beta_0) + \\theta_1 \\epsilon_{t-1} + \\epsilon_{t} \\\\\n",
    "\\Delta y_t = (1 - \\phi_1) \\beta_0 + \\phi_1 \\Delta y_{t-1} + \\theta_1 \\epsilon_{t-1} + \\epsilon_{t}\n",
    "$$\n",
    "\n",
    "so that $c = (1 - \\phi_1) \\beta_0$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                               SARIMAX Results                                \n",
      "==============================================================================\n",
      "Dep. Variable:                    wpi   No. Observations:                  124\n",
      "Model:               SARIMAX(1, 1, 1)   Log Likelihood                -135.351\n",
      "Date:                Sun, 15 Dec 2019   AIC                            278.703\n",
      "Time:                        15:25:48   BIC                            289.951\n",
      "Sample:                    01-01-1960   HQIC                           283.272\n",
      "                         - 10-01-1990                                         \n",
      "Covariance Type:                  opg                                         \n",
      "==============================================================================\n",
      "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "intercept      0.0943      0.068      1.389      0.165      -0.039       0.227\n",
      "ar.L1          0.8742      0.055     16.028      0.000       0.767       0.981\n",
      "ma.L1         -0.4120      0.100     -4.119      0.000      -0.608      -0.216\n",
      "sigma2         0.5257      0.053      9.849      0.000       0.421       0.630\n",
      "===================================================================================\n",
      "Ljung-Box (Q):                       37.12   Jarque-Bera (JB):                 9.78\n",
      "Prob(Q):                              0.60   Prob(JB):                         0.01\n",
      "Heteroskedasticity (H):              15.93   Skew:                             0.28\n",
      "Prob(H) (two-sided):                  0.00   Kurtosis:                         4.26\n",
      "===================================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n"
     ]
    }
   ],
   "source": [
    "# Dataset\n",
    "wpi1 = requests.get('https://www.stata-press.com/data/r12/wpi1.dta').content\n",
    "data = pd.read_stata(BytesIO(wpi1))\n",
    "data.index = data.t\n",
    "# Set the frequency\n",
    "data.index.freq=\"QS-OCT\"\n",
    "\n",
    "# Fit the model\n",
    "mod = sm.tsa.statespace.SARIMAX(data['wpi'], trend='c', order=(1,1,1))\n",
    "res = mod.fit(disp=False)\n",
    "print(res.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Thus the maximum likelihood estimates imply that for the process above, we have:\n",
    "\n",
    "$$\n",
    "\\Delta y_t = 0.1050 + 0.8742 \\Delta y_{t-1} - 0.4120 \\epsilon_{t-1} + \\epsilon_{t}\n",
    "$$\n",
    "\n",
    "where $\\epsilon_{t} \\sim N(0, 0.5257)$. Finally, recall that $c = (1 - \\phi_1) \\beta_0$, and here $c = 0.0943$ and $\\phi_1 = 0.8742$. To compare with the output from Stata, we could calculate the mean:\n",
    "\n",
    "$$\\beta_0 = \\frac{c}{1 - \\phi_1} = \\frac{0.0943}{1 - 0.8742} = 0.7496$$\n",
    "\n",
    "**Note**: these values are slightly different from the values in the Stata documentation because the optimizer in statsmodels has found parameters here that yield a higher likelihood. Nonetheless, they are very close."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ARIMA Example 2: Arima with additive seasonal effects\n",
    "\n",
    "This model is an extension of that from example 1. Here the data is assumed to follow the process:\n",
    "\n",
    "$$\n",
    "\\Delta y_t = c + \\phi_1 \\Delta y_{t-1} + \\theta_1 \\epsilon_{t-1} + \\theta_4 \\epsilon_{t-4} + \\epsilon_{t}\n",
    "$$\n",
    "\n",
    "The new part of this model is that there is allowed to be a annual seasonal effect (it is annual even though the periodicity is 4 because the dataset is quarterly). The second difference is that this model uses the log of the data rather than the level.\n",
    "\n",
    "Before estimating the dataset, graphs showing:\n",
    "\n",
    "1. The time series (in logs)\n",
    "2. The first difference of the time series (in logs)\n",
    "3. The autocorrelation function\n",
    "4. The partial autocorrelation function.\n",
    "\n",
    "From the first two graphs, we note that the original time series does not appear to be stationary, whereas the first-difference does. This supports either estimating an ARMA model on the first-difference of the data, or estimating an ARIMA model with 1 order of integration (recall that we are taking the latter approach). The last two graphs support the use of an ARMA(1,1,1) model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dataset\n",
    "data = pd.read_stata(BytesIO(wpi1))\n",
    "data.index = data.t\n",
    "data.index.freq=\"QS-OCT\"\n",
    "\n",
    "data['ln_wpi'] = np.log(data['wpi'])\n",
    "data['D.ln_wpi'] = data['ln_wpi'].diff()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Graph data\n",
    "fig, axes = plt.subplots(1, 2, figsize=(15,4))\n",
    "\n",
    "# Levels\n",
    "axes[0].plot(data.index._mpl_repr(), data['wpi'], '-')\n",
    "axes[0].set(title='US Wholesale Price Index')\n",
    "\n",
    "# Log difference\n",
    "axes[1].plot(data.index._mpl_repr(), data['D.ln_wpi'], '-')\n",
    "axes[1].hlines(0, data.index[0], data.index[-1], 'r')\n",
    "axes[1].set(title='US Wholesale Price Index - difference of logs');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Graph data\n",
    "fig, axes = plt.subplots(1, 2, figsize=(15,4))\n",
    "\n",
    "fig = sm.graphics.tsa.plot_acf(data.iloc[1:]['D.ln_wpi'], lags=40, ax=axes[0])\n",
    "fig = sm.graphics.tsa.plot_pacf(data.iloc[1:]['D.ln_wpi'], lags=40, ax=axes[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To understand how to specify this model in statsmodels, first recall that from example 1 we used the following code to specify the ARIMA(1,1,1) model:\n",
    "\n",
    "```python\n",
    "mod = sm.tsa.statespace.SARIMAX(data['wpi'], trend='c', order=(1,1,1))\n",
    "```\n",
    "\n",
    "The `order` argument is a tuple of the form `(AR specification, Integration order, MA specification)`. The integration order must be an integer (for example, here we assumed one order of integration, so it was specified as 1. In a pure ARMA model where the underlying data is already stationary, it would be 0).\n",
    "\n",
    "For the AR specification and MA specification components, there are two possibilities. The first is to specify the **maximum degree** of the corresponding lag polynomial, in which case the component is an integer. For example, if we wanted to specify an ARIMA(1,1,4) process, we would use:\n",
    "\n",
    "```python\n",
    "mod = sm.tsa.statespace.SARIMAX(data['wpi'], trend='c', order=(1,1,4))\n",
    "```\n",
    "\n",
    "and the corresponding data process would be:\n",
    "\n",
    "$$\n",
    "y_t = c + \\phi_1 y_{t-1} + \\theta_1 \\epsilon_{t-1} + \\theta_2 \\epsilon_{t-2} + \\theta_3 \\epsilon_{t-3} + \\theta_4 \\epsilon_{t-4} + \\epsilon_{t}\n",
    "$$\n",
    "\n",
    "or\n",
    "\n",
    "$$\n",
    "(1 - \\phi_1 L)\\Delta y_t = c + (1 + \\theta_1 L + \\theta_2 L^2 + \\theta_3 L^3 + \\theta_4 L^4) \\epsilon_{t}\n",
    "$$\n",
    "\n",
    "When the specification parameter is given as a maximum degree of the lag polynomial, it implies that all polynomial terms up to that degree are included. Notice that this is *not* the model we want to use, because it would include terms for $\\epsilon_{t-2}$ and $\\epsilon_{t-3}$, which we do not want here.\n",
    "\n",
    "What we want is a polynomial that has terms for the 1st and 4th degrees, but leaves out the 2nd and 3rd terms. To do that, we need to provide a tuple for the specification parameter, where the tuple describes **the lag polynomial itself**. In particular, here we would want to use:\n",
    "\n",
    "```python\n",
    "ar = 1          # this is the maximum degree specification\n",
    "ma = (1,0,0,1)  # this is the lag polynomial specification\n",
    "mod = sm.tsa.statespace.SARIMAX(data['wpi'], trend='c', order=(ar,1,ma)))\n",
    "```\n",
    "\n",
    "This gives the following form for the process of the data:\n",
    "\n",
    "$$\n",
    "\\Delta y_t = c + \\phi_1 \\Delta y_{t-1} + \\theta_1 \\epsilon_{t-1} + \\theta_4 \\epsilon_{t-4} + \\epsilon_{t} \\\\\n",
    "(1 - \\phi_1 L)\\Delta y_t = c + (1 + \\theta_1 L + \\theta_4 L^4) \\epsilon_{t}\n",
    "$$\n",
    "\n",
    "which is what we want."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                 SARIMAX Results                                 \n",
      "=================================================================================\n",
      "Dep. Variable:                    ln_wpi   No. Observations:                  124\n",
      "Model:             SARIMAX(1, 1, [1, 4])   Log Likelihood                 386.033\n",
      "Date:                   Sun, 15 Dec 2019   AIC                           -762.067\n",
      "Time:                           15:25:50   BIC                           -748.006\n",
      "Sample:                       01-01-1960   HQIC                          -756.355\n",
      "                            - 10-01-1990                                         \n",
      "Covariance Type:                     opg                                         \n",
      "==============================================================================\n",
      "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "intercept      0.0024      0.002      1.482      0.138      -0.001       0.006\n",
      "ar.L1          0.7811      0.095      8.264      0.000       0.596       0.966\n",
      "ma.L1         -0.3996      0.126     -3.171      0.002      -0.647      -0.153\n",
      "ma.L4          0.3077      0.120      2.561      0.010       0.072       0.543\n",
      "sigma2         0.0001    9.8e-06     11.115      0.000    8.97e-05       0.000\n",
      "===================================================================================\n",
      "Ljung-Box (Q):                       30.02   Jarque-Bera (JB):                45.22\n",
      "Prob(Q):                              0.87   Prob(JB):                         0.00\n",
      "Heteroskedasticity (H):               2.58   Skew:                             0.29\n",
      "Prob(H) (two-sided):                  0.00   Kurtosis:                         5.91\n",
      "===================================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n"
     ]
    }
   ],
   "source": [
    "# Fit the model\n",
    "mod = sm.tsa.statespace.SARIMAX(data['ln_wpi'], trend='c', order=(1,1,(1,0,0,1)))\n",
    "res = mod.fit(disp=False)\n",
    "print(res.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ARIMA Example 3: Airline Model\n",
    "\n",
    "In the previous example, we included a seasonal effect in an *additive* way, meaning that we added a term allowing the process to depend on the 4th MA lag. It may be instead that we want to model a seasonal effect in a multiplicative way. We often write the model then as an ARIMA $(p,d,q) \\times (P,D,Q)_s$, where the lowercase letters indicate the specification for the non-seasonal component, and the uppercase letters indicate the specification for the seasonal component; $s$ is the periodicity of the seasons (e.g. it is often 4 for quarterly data or 12 for monthly data). The data process can be written generically as:\n",
    "\n",
    "$$\n",
    "\\phi_p (L) \\tilde \\phi_P (L^s) \\Delta^d \\Delta_s^D y_t = A(t) + \\theta_q (L) \\tilde \\theta_Q (L^s) \\epsilon_t\n",
    "$$\n",
    "\n",
    "where:\n",
    "\n",
    "- $\\phi_p (L)$ is the non-seasonal autoregressive lag polynomial\n",
    "- $\\tilde \\phi_P (L^s)$ is the seasonal autoregressive lag polynomial\n",
    "- $\\Delta^d \\Delta_s^D y_t$ is the time series, differenced $d$ times, and seasonally differenced $D$ times.\n",
    "- $A(t)$ is the trend polynomial (including the intercept)\n",
    "- $\\theta_q (L)$ is the non-seasonal moving average lag polynomial\n",
    "- $\\tilde \\theta_Q (L^s)$ is the seasonal moving average lag polynomial\n",
    "\n",
    "sometimes we rewrite this as:\n",
    "\n",
    "$$\n",
    "\\phi_p (L) \\tilde \\phi_P (L^s) y_t^* = A(t) + \\theta_q (L) \\tilde \\theta_Q (L^s) \\epsilon_t\n",
    "$$\n",
    "\n",
    "where $y_t^* = \\Delta^d \\Delta_s^D y_t$. This emphasizes that just as in the simple case, after we take differences (here both non-seasonal and seasonal) to make the data stationary, the resulting model is just an ARMA model.\n",
    "\n",
    "As an example, consider the airline model ARIMA $(2,1,0) \\times (1,1,0)_{12}$, with an intercept. The data process can be written in the form above as:\n",
    "\n",
    "$$\n",
    "(1 - \\phi_1 L - \\phi_2 L^2) (1 - \\tilde \\phi_1 L^{12}) \\Delta \\Delta_{12} y_t = c + \\epsilon_t\n",
    "$$\n",
    "\n",
    "Here, we have:\n",
    "\n",
    "- $\\phi_p (L) = (1 - \\phi_1 L - \\phi_2 L^2)$\n",
    "- $\\tilde \\phi_P (L^s) = (1 - \\phi_1 L^12)$\n",
    "- $d = 1, D = 1, s=12$ indicating that $y_t^*$ is derived from $y_t$ by taking first-differences and then taking 12-th differences.\n",
    "- $A(t) = c$ is the *constant* trend polynomial (i.e. just an intercept)\n",
    "- $\\theta_q (L) = \\tilde \\theta_Q (L^s) = 1$ (i.e. there is no moving average effect)\n",
    "\n",
    "It may still be confusing to see the two lag polynomials in front of the time-series variable, but notice that we can multiply the lag polynomials together to get the following model:\n",
    "\n",
    "$$\n",
    "(1 - \\phi_1 L - \\phi_2 L^2 - \\tilde \\phi_1 L^{12} + \\phi_1 \\tilde \\phi_1 L^{13} + \\phi_2 \\tilde \\phi_1 L^{14} ) y_t^* = c + \\epsilon_t\n",
    "$$\n",
    "\n",
    "which can be rewritten as:\n",
    "\n",
    "$$\n",
    "y_t^* = c + \\phi_1 y_{t-1}^* + \\phi_2 y_{t-2}^* + \\tilde \\phi_1 y_{t-12}^* - \\phi_1 \\tilde \\phi_1 y_{t-13}^* - \\phi_2 \\tilde \\phi_1 y_{t-14}^* + \\epsilon_t\n",
    "$$\n",
    "\n",
    "This is similar to the additively seasonal model from example 2, but the coefficients in front of the autoregressive lags are actually combinations of the underlying seasonal and non-seasonal parameters.\n",
    "\n",
    "Specifying the model in statsmodels is done simply by adding the `seasonal_order` argument, which accepts a tuple of the form `(Seasonal AR specification, Seasonal Integration order, Seasonal MA, Seasonal periodicity)`. The seasonal AR and MA specifications, as before, can be expressed as a maximum polynomial degree or as the lag polynomial itself. Seasonal periodicity is an integer.\n",
    "\n",
    "For the airline model ARIMA $(2,1,0) \\times (1,1,0)_{12}$ with an intercept, the command is:\n",
    "\n",
    "```python\n",
    "mod = sm.tsa.statespace.SARIMAX(data['lnair'], order=(2,1,0), seasonal_order=(1,1,0,12))\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                     SARIMAX Results                                      \n",
      "==========================================================================================\n",
      "Dep. Variable:                       D.DS12.lnair   No. Observations:                  131\n",
      "Model:             SARIMAX(2, 0, 0)x(1, 0, 0, 12)   Log Likelihood                 240.821\n",
      "Date:                            Sun, 15 Dec 2019   AIC                           -473.643\n",
      "Time:                                    15:25:51   BIC                           -462.142\n",
      "Sample:                                02-01-1950   HQIC                          -468.970\n",
      "                                     - 12-01-1960                                         \n",
      "Covariance Type:                              opg                                         \n",
      "==============================================================================\n",
      "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "ar.L1         -0.4057      0.080     -5.045      0.000      -0.563      -0.248\n",
      "ar.L2         -0.0799      0.099     -0.809      0.419      -0.274       0.114\n",
      "ar.S.L12      -0.4723      0.072     -6.592      0.000      -0.613      -0.332\n",
      "sigma2         0.0014      0.000      8.403      0.000       0.001       0.002\n",
      "===================================================================================\n",
      "Ljung-Box (Q):                       49.89   Jarque-Bera (JB):                 0.72\n",
      "Prob(Q):                              0.14   Prob(JB):                         0.70\n",
      "Heteroskedasticity (H):               0.54   Skew:                             0.14\n",
      "Prob(H) (two-sided):                  0.04   Kurtosis:                         3.23\n",
      "===================================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n"
     ]
    }
   ],
   "source": [
    "# Dataset\n",
    "air2 = requests.get('https://www.stata-press.com/data/r12/air2.dta').content\n",
    "data = pd.read_stata(BytesIO(air2))\n",
    "data.index = pd.date_range(start=datetime(data.time[0], 1, 1), periods=len(data), freq='MS')\n",
    "data['lnair'] = np.log(data['air'])\n",
    "\n",
    "# Fit the model\n",
    "mod = sm.tsa.statespace.SARIMAX(data['lnair'], order=(2,1,0), seasonal_order=(1,1,0,12), simple_differencing=True)\n",
    "res = mod.fit(disp=False)\n",
    "print(res.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice that here we used an additional argument `simple_differencing=True`. This controls how the order of integration is handled in ARIMA models. If `simple_differencing=True`, then the time series provided as `endog` is literally differenced and an ARMA model is fit to the resulting new time series. This implies that a number of initial periods are lost to the differencing process, however it may be necessary either to compare results to other packages (e.g. Stata's `arima` always uses  simple differencing) or if the seasonal periodicity is large.\n",
    "\n",
    "The default is `simple_differencing=False`, in which case the integration component is implemented as part of the state space formulation, and all of the original data can be used in estimation."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ARIMA Example 4: ARMAX (Friedman)\n",
    "\n",
    "This model demonstrates the use of explanatory variables (the X part of ARMAX). When exogenous regressors are included, the SARIMAX module uses the concept of \"regression with SARIMA errors\" (see http://robjhyndman.com/hyndsight/arimax/ for details of regression with ARIMA errors versus alternative specifications), so that the model is specified as:\n",
    "\n",
    "$$\n",
    "y_t = \\beta_t x_t + u_t \\\\\n",
    "        \\phi_p (L) \\tilde \\phi_P (L^s) \\Delta^d \\Delta_s^D u_t = A(t) +\n",
    "            \\theta_q (L) \\tilde \\theta_Q (L^s) \\epsilon_t\n",
    "$$\n",
    "\n",
    "Notice that the first equation is just a linear regression, and the second equation just describes the process followed by the error component as SARIMA (as was described in example 3). One reason for this specification is that the estimated parameters have their natural interpretations.\n",
    "\n",
    "This specification nests many simpler specifications. For example, regression with AR(2) errors is:\n",
    "\n",
    "$$\n",
    "y_t = \\beta_t x_t + u_t \\\\\n",
    "(1 - \\phi_1 L - \\phi_2 L^2) u_t = A(t) + \\epsilon_t\n",
    "$$\n",
    "\n",
    "The model considered in this example is regression with ARMA(1,1) errors. The process is then written:\n",
    "\n",
    "$$\n",
    "\\text{consump}_t = \\beta_0 + \\beta_1 \\text{m2}_t + u_t \\\\\n",
    "(1 - \\phi_1 L) u_t = (1 - \\theta_1 L) \\epsilon_t\n",
    "$$\n",
    "\n",
    "Notice that $\\beta_0$ is, as described in example 1 above, *not* the same thing as an intercept specified by `trend='c'`. Whereas in the examples above we estimated the intercept of the model via the trend polynomial, here, we demonstrate how to estimate $\\beta_0$ itself by adding a constant to the exogenous dataset. In the output, the $beta_0$ is called `const`, whereas above the intercept $c$ was called `intercept` in the output."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/peter/.pyenv/versions/anaconda3-2019.03/envs/smtest/lib/python3.7/site-packages/numpy/core/fromnumeric.py:2389: FutureWarning: Method .ptp is deprecated and will be removed in a future version. Use numpy.ptp instead.\n",
      "  return ptp(axis=axis, out=out, **kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                               SARIMAX Results                                \n",
      "==============================================================================\n",
      "Dep. Variable:                consump   No. Observations:                   92\n",
      "Model:               SARIMAX(1, 0, 1)   Log Likelihood                -340.508\n",
      "Date:                Sun, 15 Dec 2019   AIC                            691.015\n",
      "Time:                        15:25:51   BIC                            703.624\n",
      "Sample:                    01-01-1959   HQIC                           696.105\n",
      "                         - 10-01-1981                                         \n",
      "Covariance Type:                  opg                                         \n",
      "==============================================================================\n",
      "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const        -36.0605     56.643     -0.637      0.524    -147.079      74.958\n",
      "m2             1.1220      0.036     30.824      0.000       1.051       1.193\n",
      "ar.L1          0.9348      0.041     22.717      0.000       0.854       1.016\n",
      "ma.L1          0.3091      0.089      3.488      0.000       0.135       0.483\n",
      "sigma2        93.2556     10.889      8.565      0.000      71.914     114.597\n",
      "===================================================================================\n",
      "Ljung-Box (Q):                       38.72   Jarque-Bera (JB):                23.49\n",
      "Prob(Q):                              0.53   Prob(JB):                         0.00\n",
      "Heteroskedasticity (H):              22.51   Skew:                             0.17\n",
      "Prob(H) (two-sided):                  0.00   Kurtosis:                         5.45\n",
      "===================================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n"
     ]
    }
   ],
   "source": [
    "# Dataset\n",
    "friedman2 = requests.get('https://www.stata-press.com/data/r12/friedman2.dta').content\n",
    "data = pd.read_stata(BytesIO(friedman2))\n",
    "data.index = data.time\n",
    "data.index.freq = \"QS-OCT\"\n",
    "\n",
    "# Variables\n",
    "endog = data.loc['1959':'1981', 'consump']\n",
    "exog = sm.add_constant(data.loc['1959':'1981', 'm2'])\n",
    "\n",
    "# Fit the model\n",
    "mod = sm.tsa.statespace.SARIMAX(endog, exog, order=(1,0,1))\n",
    "res = mod.fit(disp=False)\n",
    "print(res.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ARIMA Postestimation: Example 1 - Dynamic Forecasting\n",
    "\n",
    "Here we describe some of the post-estimation capabilities of statsmodels' SARIMAX.\n",
    "\n",
    "First, using the model from example, we estimate the parameters using data that *excludes the last few observations* (this is a little artificial as an example, but it allows considering performance of out-of-sample forecasting and facilitates comparison to Stata's documentation)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                               SARIMAX Results                                \n",
      "==============================================================================\n",
      "Dep. Variable:                consump   No. Observations:                   77\n",
      "Model:               SARIMAX(1, 0, 1)   Log Likelihood                -243.316\n",
      "Date:                Sun, 15 Dec 2019   AIC                            496.633\n",
      "Time:                        15:25:52   BIC                            508.352\n",
      "Sample:                    01-01-1959   HQIC                           501.320\n",
      "                         - 01-01-1978                                         \n",
      "Covariance Type:                  opg                                         \n",
      "==============================================================================\n",
      "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const          0.6777     18.491      0.037      0.971     -35.565      36.920\n",
      "m2             1.0379      0.021     50.330      0.000       0.997       1.078\n",
      "ar.L1          0.8775      0.059     14.859      0.000       0.762       0.993\n",
      "ma.L1          0.2771      0.108      2.572      0.010       0.066       0.488\n",
      "sigma2        31.6977      4.683      6.769      0.000      22.520      40.876\n",
      "===================================================================================\n",
      "Ljung-Box (Q):                       46.78   Jarque-Bera (JB):                 6.05\n",
      "Prob(Q):                              0.21   Prob(JB):                         0.05\n",
      "Heteroskedasticity (H):               6.09   Skew:                             0.57\n",
      "Prob(H) (two-sided):                  0.00   Kurtosis:                         3.76\n",
      "===================================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n"
     ]
    }
   ],
   "source": [
    "# Dataset\n",
    "raw = pd.read_stata(BytesIO(friedman2))\n",
    "raw.index = raw.time\n",
    "raw.index.freq = \"QS-OCT\"\n",
    "data = raw.loc[:'1981']\n",
    "\n",
    "# Variables\n",
    "endog = data.loc['1959':, 'consump']\n",
    "exog = sm.add_constant(data.loc['1959':, 'm2'])\n",
    "nobs = endog.shape[0]\n",
    "\n",
    "# Fit the model\n",
    "mod = sm.tsa.statespace.SARIMAX(endog.loc[:'1978-01-01'], exog=exog.loc[:'1978-01-01'], order=(1,0,1))\n",
    "fit_res = mod.fit(disp=False)\n",
    "print(fit_res.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we want to get results for the full dataset but using the estimated parameters (on a subset of the data)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "mod = sm.tsa.statespace.SARIMAX(endog, exog=exog, order=(1,0,1))\n",
    "res = mod.filter(fit_res.params)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `predict` command is first applied here to get in-sample predictions. We use the `full_results=True` argument to allow us to calculate confidence intervals (the default output of `predict` is just the predicted values).\n",
    "\n",
    "With no other arguments, `predict` returns the one-step-ahead in-sample predictions for the entire sample."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# In-sample one-step-ahead predictions\n",
    "predict = res.get_prediction()\n",
    "predict_ci = predict.conf_int()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also get *dynamic predictions*. One-step-ahead prediction uses the true values of the endogenous values at each step to predict the next in-sample value. Dynamic predictions use one-step-ahead prediction up to some point in the dataset (specified by the `dynamic` argument); after that, the previous *predicted* endogenous values are used in place of the true endogenous values for each new predicted element.\n",
    "\n",
    "The `dynamic` argument is specified to be an *offset* relative to the `start` argument. If `start` is not specified, it is assumed to be `0`.\n",
    "\n",
    "Here we perform dynamic prediction starting in the first quarter of 1978."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dynamic predictions\n",
    "predict_dy = res.get_prediction(dynamic='1978-01-01')\n",
    "predict_dy_ci = predict_dy.conf_int()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can graph the one-step-ahead and dynamic predictions (and the corresponding confidence intervals) to see their relative performance. Notice that up to the point where dynamic prediction begins (1978:Q1), the two are the same."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Graph\n",
    "fig, ax = plt.subplots(figsize=(9,4))\n",
    "npre = 4\n",
    "ax.set(title='Personal consumption', xlabel='Date', ylabel='Billions of dollars')\n",
    "\n",
    "# Plot data points\n",
    "data.loc['1977-07-01':, 'consump'].plot(ax=ax, style='o', label='Observed')\n",
    "\n",
    "# Plot predictions\n",
    "predict.predicted_mean.loc['1977-07-01':].plot(ax=ax, style='r--', label='One-step-ahead forecast')\n",
    "ci = predict_ci.loc['1977-07-01':]\n",
    "ax.fill_between(ci.index, ci.iloc[:,0], ci.iloc[:,1], color='r', alpha=0.1)\n",
    "predict_dy.predicted_mean.loc['1977-07-01':].plot(ax=ax, style='g', label='Dynamic forecast (1978)')\n",
    "ci = predict_dy_ci.loc['1977-07-01':]\n",
    "ax.fill_between(ci.index, ci.iloc[:,0], ci.iloc[:,1], color='g', alpha=0.1)\n",
    "\n",
    "legend = ax.legend(loc='lower right')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, graph the prediction *error*. It is obvious that, as one would suspect, one-step-ahead prediction is considerably better."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 648x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Prediction error\n",
    "\n",
    "# Graph\n",
    "fig, ax = plt.subplots(figsize=(9,4))\n",
    "npre = 4\n",
    "ax.set(title='Forecast error', xlabel='Date', ylabel='Forecast - Actual')\n",
    "\n",
    "# In-sample one-step-ahead predictions and 95% confidence intervals\n",
    "predict_error = predict.predicted_mean - endog\n",
    "predict_error.loc['1977-10-01':].plot(ax=ax, label='One-step-ahead forecast')\n",
    "ci = predict_ci.loc['1977-10-01':].copy()\n",
    "ci.iloc[:,0] -= endog.loc['1977-10-01':]\n",
    "ci.iloc[:,1] -= endog.loc['1977-10-01':]\n",
    "ax.fill_between(ci.index, ci.iloc[:,0], ci.iloc[:,1], alpha=0.1)\n",
    "\n",
    "# Dynamic predictions and 95% confidence intervals\n",
    "predict_dy_error = predict_dy.predicted_mean - endog\n",
    "predict_dy_error.loc['1977-10-01':].plot(ax=ax, style='r', label='Dynamic forecast (1978)')\n",
    "ci = predict_dy_ci.loc['1977-10-01':].copy()\n",
    "ci.iloc[:,0] -= endog.loc['1977-10-01':]\n",
    "ci.iloc[:,1] -= endog.loc['1977-10-01':]\n",
    "ax.fill_between(ci.index, ci.iloc[:,0], ci.iloc[:,1], color='r', alpha=0.1)\n",
    "\n",
    "legend = ax.legend(loc='lower left');\n",
    "legend.get_frame().set_facecolor('w')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
